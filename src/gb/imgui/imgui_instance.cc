// Copyright (c) 2020 John Pursey
//
// Use of this source code is governed by an MIT-style License that can be found
// in the LICENSE file or at https://opensource.org/licenses/MIT.

#include "gb/imgui/imgui_instance.h"

#include "absl/memory/memory.h"
#include "gb/file/file.h"
#include "gb/file/file_system.h"
#include "gb/render/binding.h"
#include "gb/render/draw_list.h"
#include "gb/render/render_system.h"

ImFileHandle ImFileOpen(const char* filename, const char* mode) {
  auto* instance = gb::ImGuiInstance::GetActive();
  if (instance == nullptr) {
    return nullptr;
  }
  auto* file_system = instance->GetContext().GetPtr<gb::FileSystem>();

  gb::FileFlags flags = gb::FromFopenMode(mode);
  if (flags.IsEmpty()) {
    return nullptr;
  }

  auto file = file_system->OpenFile(filename, flags);
  if (file == nullptr) {
    return nullptr;
  }
  if (mode[0] == 'a') {
    if (file->SeekEnd() < 0) {
      return nullptr;
    }
  }
  return file.release();
}

bool ImFileClose(ImFileHandle handle) {
  delete static_cast<gb::File*>(handle);
  return true;
}

uint64_t ImFileGetSize(ImFileHandle handle) {
  auto* file = static_cast<gb::File*>(handle);
  if (file == nullptr) {
    return 0;
  }
  auto position = file->GetPosition();
  auto size = file->SeekEnd();
  position = file->SeekTo(position);
  if (position < 0 || size < 0) {
    LOG(ERROR) << "Error determining file size in ImGui.";
    return 0;
  }
  return static_cast<uint64_t>(size);
}

uint64_t ImFileRead(void* data, uint64_t size, uint64_t count,
                    ImFileHandle handle) {
  auto* file = static_cast<gb::File*>(handle);
  if (file == nullptr) {
    return 0;
  }
  return static_cast<uint64_t>(
      file->Read(data, static_cast<int64_t>(size * count)));
}

uint64_t ImFileWrite(const void* data, uint64_t size, uint64_t count,
                     ImFileHandle handle) {
  auto* file = static_cast<gb::File*>(handle);
  if (file == nullptr) {
    return 0;
  }
  return static_cast<uint64_t>(
      file->Write(data, static_cast<int64_t>(size * count)));
}

namespace gb {

namespace {

struct ImGuiSceneConstants {
  float scale_x, scale_y;
  float offset_x, offset_y;
};

struct ImGuiVertex {
  float x, y;
  float u, v;
  Pixel pixel;
};

const uint8_t kImGuiVertexShaderData[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x0d, 0x00,
    0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
    0x28, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00,
    0x04, 0x00, 0x09, 0x00, 0x47, 0x4c, 0x5f, 0x41, 0x52, 0x42, 0x5f, 0x73,
    0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x64,
    0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x00, 0x00,
    0x04, 0x00, 0x0a, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
    0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47,
    0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x50, 0x65, 0x72, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74,
    0x69, 0x6f, 0x6e, 0x00, 0x06, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x69, 0x6e, 0x74,
    0x53, 0x69, 0x7a, 0x65, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x43,
    0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00,
    0x06, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x67, 0x6c, 0x5f, 0x43, 0x75, 0x6c, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61,
    0x6e, 0x63, 0x65, 0x00, 0x05, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x69, 0x6e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00,
    0x05, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x00, 0x53, 0x63, 0x65, 0x6e,
    0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x73, 0x00, 0x00,
    0x06, 0x00, 0x05, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x6b, 0x4f, 0x66, 0x66,
    0x73, 0x65, 0x74, 0x00, 0x05, 0x00, 0x03, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x26, 0x00, 0x00, 0x00,
    0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x43, 0x6f,
    0x6c, 0x6f, 0x72, 0x00, 0x05, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00,
    0x6f, 0x75, 0x74, 0x55, 0x76, 0x00, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00,
    0x2c, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x55, 0x76, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x48, 0x00, 0x05, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x26, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x2b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x08, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x1c, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x0c, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x15, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00,
    0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x2b, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f,
    0x20, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00, 0x00,
    0x26, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
    0x85, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00,
    0x17, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00,
    0x1b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x1d, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00,
    0x10, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
    0x1d, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00,
    0x22, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
    0x41, 0x00, 0x05, 0x00, 0x24, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x25, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
    0x3e, 0x00, 0x03, 0x00, 0x26, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00,
    0x2c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x2b, 0x00, 0x00, 0x00,
    0x2d, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00};

const uint8_t kImGuiFragmentShaderData[] = {
    0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x08, 0x00, 0x0d, 0x00,
    0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
    0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00,
    0x04, 0x00, 0x09, 0x00, 0x47, 0x4c, 0x5f, 0x41, 0x52, 0x42, 0x5f, 0x73,
    0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x64,
    0x65, 0x72, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x00, 0x00,
    0x04, 0x00, 0x0a, 0x00, 0x47, 0x4c, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c,
    0x45, 0x5f, 0x63, 0x70, 0x70, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x5f,
    0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
    0x76, 0x65, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x47, 0x4c, 0x5f, 0x47,
    0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
    0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e,
    0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x43, 0x6f,
    0x6c, 0x6f, 0x72, 0x00, 0x05, 0x00, 0x05, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x6b, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x55, 0x76,
    0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00,
    0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x0b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x47, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00,
    0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x20, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
    0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00,
    0x0a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x3b, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x0e, 0x00, 0x00, 0x00,
    0x0d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x0f, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x17, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x13, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00,
    0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
    0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00,
    0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00,
    0x0e, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
    0x3d, 0x00, 0x04, 0x00, 0x12, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x14, 0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00,
    0x16, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
    0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
    0x0c, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00,
    0x09, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00,
    0x38, 0x00, 0x01, 0x00};

}  // namespace

std::unique_ptr<ImGuiInstance> ImGuiInstance::Create(CreateContract contract) {
  ValidatedContext context = std::move(contract);
  if (!context.IsValid()) {
    LOG(ERROR) << "Failed to create ImGuiInstance";
    return nullptr;
  }
  context.SetPtr(ImGui::CreateContext());
  auto instance = absl::WrapUnique(new ImGuiInstance(std::move(context)));
  if (!instance->Init()) {
    return nullptr;
  }
  return instance;
}

ImGuiInstance::ImGuiInstance(ValidatedContext context)
    : context_(std::move(context)) {
  ImGui::GetIO().UserData = this;
}

ImGuiInstance::~ImGuiInstance() {
  ImGui::DestroyContext(context_.GetPtr<ImGuiContext>());
}

bool ImGuiInstance::Init() {
  auto* render_system = context_.GetPtr<RenderSystem>();

  const auto* scene_constants_type =
      render_system->RegisterConstantsType<ImGuiSceneConstants>(
          "ImGuiSceneConstants");
  auto scene_binding =
      Binding()
          .SetShaders(ShaderType::kVertex)
          .SetLocation(BindingSet::kScene, 0)
          .SetConstants(scene_constants_type, DataVolatility::kPerFrame);
  auto* scene_type = render_system->RegisterSceneType("ImGui", {scene_binding});
  scene_ = render_system->CreateScene(scene_type,
                                      context_.GetValue<int>(kKeySceneOrder));
  if (scene_ == nullptr) {
    LOG(ERROR) << "Could not create ImGui render scene";
    return false;
  }
  const auto* vertex_type = render_system->RegisterVertexType<ImGuiVertex>(
      "ImGuiVertex",
      {ShaderValue::kVec2, ShaderValue::kVec2, ShaderValue::kColor});
  auto* vertex_shader = render_system->CreateShader(
      &resources_, ShaderType::kVertex,
      render_system->CreateShaderCode(kImGuiVertexShaderData,
                                      ABSL_ARRAYSIZE(kImGuiVertexShaderData)),
      {scene_binding},
      {ShaderParam(ShaderValue::kVec2, 0), ShaderParam(ShaderValue::kVec2, 1),
       ShaderParam(ShaderValue::kVec4, 2)},
      {ShaderParam(ShaderValue::kVec4, 0), ShaderParam(ShaderValue::kVec2, 1)});
  auto* fragment_shader = render_system->CreateShader(
      &resources_, ShaderType::kFragment,
      render_system->CreateShaderCode(kImGuiFragmentShaderData,
                                      ABSL_ARRAYSIZE(kImGuiFragmentShaderData)),
      {Binding()
           .SetShaders(ShaderType::kFragment)
           .SetLocation(BindingSet::kMaterial, 0)
           .SetTexture()},
      {ShaderParam(ShaderValue::kVec4, 0), ShaderParam(ShaderValue::kVec2, 1)},
      {});
  auto* material_type = render_system->CreateMaterialType(
      &resources_, scene_type, vertex_type, vertex_shader, fragment_shader,
      MaterialConfig()
          .SetCullMode(CullMode::kNone)
          .SetDepthMode(DepthMode::kNone));
  material_ = render_system->CreateMaterial(&resources_, material_type);
  mesh_ = render_system->CreateMesh(&resources_, material_,
                                    DataVolatility::kPerFrame, 1000, 1000);
  if (mesh_ == nullptr) {
    LOG(ERROR) << "Failed to create ImGui render resources";
    return false;
  }
  instance_data_ = material_->CreateInstanceBindingData();
  if (instance_data_ == nullptr) {
    LOG(ERROR) << "Failed to create ImGui instance data";
    return false;
  }
  return true;
}

void ImGuiInstance::SetActive() {
  ImGui::SetCurrentContext(context_.GetPtr<ImGuiContext>());
}

bool ImGuiInstance::LoadFonts() {
  if (!IsActive()) {
    LOG(ERROR) << "Dear ImGui is not active for this instance";
    return false;
  }
  if (fonts_initialized_) {
    return true;
  }

  ImGuiIO& io = ImGui::GetIO();

  unsigned char* pixels = nullptr;
  int width = 0;
  int height = 0;
  io.Fonts->GetTexDataAsRGBA32(&pixels, &width, &height);

  auto* render_system = context_.GetPtr<RenderSystem>();
  auto texture =
      render_system->CreateTexture(DataVolatility::kStaticWrite, width, height);
  if (texture == nullptr ||
      !texture->Set(pixels, width * height * sizeof(Pixel))) {
    LOG(ERROR) << "Failed to initialize font texture for Dear ImGui";
    return false;
  }
  resources_.Add(texture.Get());
  material_->GetMaterialBindingData()->SetTexture(0, texture.Get());
  io.Fonts->TexID = static_cast<ImTextureID>(material_);
  return true;
}

ImTextureID ImGuiInstance::AddTexture(gb::Texture* texture) {
  auto* render_system = context_.GetPtr<RenderSystem>();
  auto* material =
      render_system->CreateMaterial(&resources_, material_->GetType());
  if (material == nullptr) {
    LOG(ERROR) << "Failed to create GUI texture";
    return nullptr;
  }
  resources_.Add(texture);
  material->GetMaterialBindingData()->SetTexture(0, texture);
  return static_cast<ImTextureID>(material);
}

void ImGuiInstance::Draw(ImDrawData* draw_data) {
  if (!IsActive() || mesh_ == nullptr) {
    return;
  }
  if (draw_data == nullptr) {
    ImGui::Render();
    draw_data = ImGui::GetDrawData();
  }

  auto* render_system = context_.GetPtr<RenderSystem>();
  if (draw_data->TotalVtxCount > mesh_->GetVertexCapacity() ||
      draw_data->TotalIdxCount > mesh_->GetTriangleCapacity() * 3) {
    const int max_vertices =
        std::max(draw_data->TotalVtxCount * 2, mesh_->GetVertexCapacity());
    const int max_indices = std::max(draw_data->TotalIdxCount * 2,
                                     mesh_->GetTriangleCapacity() * 3);
    resources_.Remove(mesh_, false);
    mesh_ = render_system->CreateMesh(&resources_, material_,
                                      DataVolatility::kPerFrame, max_vertices,
                                      max_indices / 3);
    if (mesh_ == nullptr) {
      LOG(ERROR) << "Failed to create mesh for GUI!";
      return;
    }
  }
  auto mesh_view = mesh_->Edit();
  if (mesh_view == nullptr) {
    LOG(ERROR) << "Failed to edit mesh for GUI!";
    mesh_ = nullptr;
    return;
  }
  mesh_view->RemoveVertices(0, mesh_view->GetVertexCount());
  mesh_view->RemoveTriangles(0, mesh_view->GetTriangleCount());

  auto dimensions = render_system->GetFrameDimensions();
  float frame_width = static_cast<float>(dimensions.width);
  float frame_height = static_cast<float>(dimensions.height);

  DrawList draw;
  draw.SetMesh(mesh_, instance_data_.get());
  ImTextureID last_texture_id = static_cast<ImTextureID>(mesh_->GetMaterial());
  ImVec2 clip_off = draw_data->DisplayPos;
  ImVec2 clip_scale = draw_data->FramebufferScale;
  int vertex_offset = 0;
  int index_offset = 0;
  for (int list_index = 0; list_index < draw_data->CmdListsCount;
       list_index++) {
    const ImDrawList* cmd_list = draw_data->CmdLists[list_index];
    mesh_view->AddVertices(absl::MakeConstSpan(
        reinterpret_cast<ImGuiVertex*>(cmd_list->VtxBuffer.Data),
        cmd_list->VtxBuffer.Size));
    mesh_view->AddTriangles(absl::MakeConstSpan(cmd_list->IdxBuffer.Data,
                                                cmd_list->IdxBuffer.Size));
    for (int i = 0; i < cmd_list->CmdBuffer.Size; i++) {
      const ImDrawCmd* cmd = &cmd_list->CmdBuffer[i];
      if (cmd->UserCallback != NULL) {
        if (cmd->UserCallback == ImDrawCallback_ResetRenderState) {
          draw.Reset();
        } else
          cmd->UserCallback(cmd_list, cmd);
      } else {
        ImVec4 clip_rect;
        clip_rect.x = (cmd->ClipRect.x - clip_off.x) * clip_scale.x;
        clip_rect.y = (cmd->ClipRect.y - clip_off.y) * clip_scale.y;
        clip_rect.z = (cmd->ClipRect.z - clip_off.x) * clip_scale.x;
        clip_rect.w = (cmd->ClipRect.w - clip_off.y) * clip_scale.y;

        if (clip_rect.x < frame_width && clip_rect.y < frame_height &&
            clip_rect.z >= 0.0f && clip_rect.w >= 0.0f) {
          if (clip_rect.x < 0.0f) {
            clip_rect.x = 0.0f;
          }
          if (clip_rect.y < 0.0f) {
            clip_rect.y = 0.0f;
          }
          if (clip_rect.z > 0.0f && clip_rect.w > 0.0f) {
            if (clip_rect.z > frame_width) {
              clip_rect.z = frame_width;
            }
            if (clip_rect.w > frame_height) {
              clip_rect.w = frame_height;
            }
            draw.SetScissor(static_cast<int>(clip_rect.x),
                            static_cast<int>(clip_rect.y),
                            static_cast<int>(clip_rect.z - clip_rect.x),
                            static_cast<int>(clip_rect.w - clip_rect.y));
            if (cmd->TextureId != last_texture_id) {
              last_texture_id = cmd->TextureId;
              draw.SetMaterialData(static_cast<gb::Material*>(cmd->TextureId)
                                       ->GetMaterialBindingData());
            }
            draw.DrawPartial((cmd->IdxOffset + index_offset) / 3,
                             cmd->ElemCount / 3,
                             cmd->VtxOffset + vertex_offset);
          }
        }
      }
    }
    index_offset += cmd_list->IdxBuffer.Size;
    vertex_offset += cmd_list->VtxBuffer.Size;
  }

  ImGuiSceneConstants scene_values;
  scene_values.scale_x = 2.0f / draw_data->DisplaySize.x;
  scene_values.scale_y = 2.0f / draw_data->DisplaySize.y;
  scene_values.offset_x =
      -1.0f - draw_data->DisplayPos.x * scene_values.scale_x;
  scene_values.offset_y =
      -1.0f - draw_data->DisplayPos.y * scene_values.scale_y;
  scene_->GetSceneBindingData()->SetConstants<ImGuiSceneConstants>(
      0, scene_values);

  render_system->Draw(scene_.get(), draw);
}

}  // namespace gb
