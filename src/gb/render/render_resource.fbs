// Copyright (c) 2020 John Pursey
//
// Use of this source code is governed by an MIT-style License that can be found
// in the LICENSE file or at https://opensource.org/licenses/MIT.

namespace gb.fbs;

// Must be kept in sync with gb::ShaderType
enum ShaderType : uint8 {
  Vertex,
  Fragment,
}

// Must be kept in sync with gb::BindingSet
enum BindingSet : uint8 {
  Scene,
  Material,
  Instance,
}

// Must be kept in sync with gb::BindingType
enum BindingType : uint8 {
  None,
  Constants,
  Texture,
}

// Must be kept in sync with gb::DataVolatility
enum DataVolatility : uint8 {
  Invalid,
  StaticWrite,
  StaticReadWrite,
  PerFrame,
}

// Must be kept in sync with gb::DepthMode
enum DepthMode : uint8 {
  None,
  Test,
  Write,
  TestAndWrite,
}

// Must be kept in sync with gb::CullMode
enum CullMode : uint8 {
  None,
  Front,
  Back,
}

// Must be kept in sync with gb::SamplerAddressMode
enum SamplerAddressMode : uint8 {
  Repeat,
  MirrorRepeat,
  ClampEdge,
  ClampBorder,
}

// Must be kept in sync with gb::ShaderValue
enum ShaderValue : int32 {
  Float,
  Vec2,
  Vec3,
  Vec4,
  Color,
}

// Must match layout of gb::ShaderParam
struct ShaderParam {
  value : ShaderValue;
  location : int32;
}

// Entry for binding chunk.
table Binding {
  shaders : uint8;
  set : BindingSet;
  index : int32;
  type : BindingType;
  volatility : DataVolatility;
  constants_name : string;
}

// Entry for scene, material, or instance binding data chunk.
table BindingDataEntry {
  index : int32;
  type : BindingType;
  texture_id : uint64;
  constants_data : [uint8];
}

// Chunk for mesh resource.
table MeshChunk {
  material_id : uint64;
  volatility : DataVolatility;
  vertex_size : int32;
  vertices : [uint8];
  indices : [uint16];
}

// Chunk for material resource.
table MaterialChunk {
  material_type_id : uint64;
  bindings : [Binding];
  material_data : [BindingDataEntry];
  instance_data : [BindingDataEntry];
}

// Chunk for material type resource.
table MaterialTypeChunk {
  vertex_shader_id : uint64;
  fragment_shader_id : uint64;
  scene_type_name : string;
  vertex_type_name : string;
  cull_mode : CullMode;
  depth_mode : DepthMode;
  bindings : [Binding];
  material_data : [BindingDataEntry];
  instance_data : [BindingDataEntry];
}

// Chunk for shader resource.
table ShaderChunk {
  type : ShaderType;
  bindings: [Binding];
  inputs : [ShaderParam];
  outputs : [ShaderParam];
  code : [uint8];
}

// Texture sampler options.
table SamplerOptions {
  filter : bool;
  mipmap : bool;
  address_mode : SamplerAddressMode;
  border : uint32;
  tile_size : uint32;
}

// Chunk for texture resource.
table TextureChunk {
  volatility : DataVolatility;
  width : uint16;
  height : uint16;
  pixels : [uint32];
  options : SamplerOptions;
}
